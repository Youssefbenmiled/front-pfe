import React, { Component, Fragment } from "react";
import { Row, Card, CardBody, CardTitle, Table, Label } from "reactstrap";
import IntlMessages from "../../../helpers/IntlMessages";
import { Colxx, Separator } from "../../../components/common/CustomBootstrap";
import Breadcrumb from "../../../containers/navs/elem_parent/Breadcrumb";
import "./table.css";
import axios from "axios";
import { levels } from "../../../constants/defaultValues";
import Select from "react-select";
import DataListView from "../../../containers/ecole/emplois_eleves/DataListView";
import Pagination from "../../../containers/ecole/emplois_eleves/Pagination";
import ContextMenuContainer from "../../../containers/ecole/emplois_eleves/ContextMenuContainer";
import ListPageHeading from "../../../containers/ecole/emplois_eleves/ListPageHeading";
import AddNewModal from "../../../containers/ecole/emplois_eleves/AddNewModal";
import DeleteModal from "../../../containers/ecole/emplois_eleves/DeleteModal";
function collect(props) {
    return { data: props.data };
}

class emploi_eleve extends Component {
    constructor(props) {
        super(props);
        this.mouseTrap = require("mousetrap");

        this.state = {
            classet: [],

            displayMode: "list",

            selectedPageSize: 10,
            orderOptions: [
                { column: "id", label: "Identifiant" },
                { column: "niveau", label: "Niveau" },
                // { column: "classe", label: "Classe" }
            ],
            pageSizes: [1, 2, 5, 10, 20, 30, 50, 100],




            selectedOrderOption: { column: "id", label: "Identifiant" },
            dropdownSplitOpen: false,
            modalOpen: false,
            modalOpenUpdate: false,
            modalOpenDelete: false,
            currentPage: 1,
            totalItemCount: 0,
            totalPage: 1,
            selectedItems: [],
            lastChecked: null,
            isLoading: false,

            emploi: [],
            valueType: { label: "Tous les emplois", value: "*" },
            valueNiveau: null,
            valueClasse: null,
            items: [],

        };
    }
    componentDidMount() {
        this.dataListRender();
        this.mouseTrap.bind(["ctrl+a", "command+a"], () =>
            this.handleChangeSelectAll(false)
        );
        this.mouseTrap.bind(["ctrl+d", "command+d"], () => {
            this.setState({
                selectedItems: []
            });
            return false;
        });
    }

    componentWillUnmount() {
        this.mouseTrap.unbind("ctrl+a");
        this.mouseTrap.unbind("command+a");
        this.mouseTrap.unbind("ctrl+d");
        this.mouseTrap.unbind("command+d");
    }

    toggleModal = () => {
        this.setState({
            modalOpen: !this.state.modalOpen
        });
    };

    toggleModalDelete = () => {
        this.setState({
            modalOpenDelete: !this.state.modalOpenDelete
        });
    };

    changeOrderBy = column => {
        this.setState(
            {
                selectedOrderOption: this.state.orderOptions.find(
                    x => x.column === column
                )
            },
            () => this.dataListRender()
        );
    };
    changePageSize = size => {
        this.setState(
            {
                selectedPageSize: size,
                currentPage: 1
            },
            () => this.dataListRender()
        );
    };
    changeDisplayMode = mode => {
        this.setState({
            displayMode: mode
        });
        return false;
    };
    onChangePage = page => {
        this.setState(
            {
                currentPage: page
            },
            () => this.dataListRender()
        );
    };

    onCheckItem = (event, id) => {
        if (
            event.target.tagName === "A" ||
            (event.target.parentElement && event.target.parentElement.tagName === "A")
        ) {
            return true;
        }
        if (this.state.lastChecked === null) {
            this.setState({
                lastChecked: id
            });
        }

        let selectedItems = this.state.selectedItems;
        if (selectedItems.includes(id)) {
            selectedItems = selectedItems.filter(x => x !== id);
        } else {
            selectedItems.push(id);
        }
        this.setState({
            selectedItems
        });

        if (event.shiftKey) {
            var items = this.state.items;
            var start = this.getIndex(id, items, "id");
            var end = this.getIndex(this.state.lastChecked, items, "id");
            items = items.slice(Math.min(start, end), Math.max(start, end) + 1);
            selectedItems.push(
                ...items.map(item => {
                    return item.id;
                })
            );
            selectedItems = Array.from(new Set(selectedItems));
            this.setState({
                selectedItems
            });
        }
        document.activeElement.blur();
    };

    getIndex(value, arr, prop) {
        for (var i = 0; i < arr.length; i++) {
            if (arr[i][prop] === value) {
                return i;
            }
        }
        return -1;
    }
    handleChangeSelectAll = isToggle => {
        if (this.state.selectedItems.length >= this.state.items.length) {
            if (isToggle) {
                this.setState({
                    selectedItems: []
                });
            }
        } else {
            this.setState({
                selectedItems: this.state.items.map(x => x.id)
            });
        }
        document.activeElement.blur();
        return false;
    };
    classes(niveau) {
        try {
            axios
                .get(
                    "http://api.onyx.inedit-gd.tn/classe/classe/" + niveau)
                .then(res => {
                    console.log(res)
                    return res.data;
                })
                .then(data => {
                    this.setState({
                        classet: data,

                    });
                }, error => {
                    console.log(error)
                });
        }
        catch (error) {
            console.log("failed" + error)
        }
    }


    dataListRender() {
        const {
            selectedPageSize,
            currentPage,
            selectedOrderOption,
            valueClasse,
            valueType
        } = this.state;

        if (valueType.value === "classe" && !valueClasse) {
            this.setState({ items: [] });
            return;
        }
        var query = "http://api.onyx.inedit-gd.tn/emploi/getAll?";
        query += "count=" + selectedPageSize
        query += "&page=" + currentPage
        query += "&order=" + selectedOrderOption.column

        if (valueClasse && valueClasse.value) {
            query += "&classe=" + valueClasse.value
        }
        try {
            axios
                .get(query)
                .then(res => res.data)
                .then(data => {
                    this.setState({
                        totalItemCount: data.count,
                        totalPage: Math.round(data.count / selectedPageSize),
                        items: data.list,
                        selectedItems: [],
                        isLoading: true
                    });
                });
        } catch (error) {
            console.log("failed" + error)
        }
    }

    onContextMenuClick = (e, data, target) => {
        // console.log(
        //   "onContextMenuClick - selected items",
        //   this.state.selectedItems
        // );
        // console.log("onContextMenuClick - action : ", data.action);
    };

    onContextMenu = (e, data) => {
        const clickedProductId = data.data;
        if (!this.state.selectedItems.includes(clickedProductId)) {
            this.setState({
                selectedItems: [clickedProductId]
            });
        }

        return true;
    };


    setEmploi = emploi => {
        this.setState({ emploi });
    };
    handleChangeType = value => {
        this.setState({
            valueType: value,
            valueNiveau: null,
            valueClasse: null,
            selectedItems: []

        }, this.dataListRender);


    };
    handleChangeNiveau = value => {
        this.setState({
            valueNiveau: value,
            valueClasse: null,
            selectedItems: [],
            items: []

        });
        this.classes(value.value)

    };
    handleChangeClasse = value => {
        this.setState({
            valueClasse: value,
            selectedItems: []
        }, this.dataListRender);
    };

    setST = (selectedItems) => {
        this.setState({ selectedItems })
    }
    render() {
        const cls = this.state.classet.map((classe, i) => {
            return { label: classe.Nom, value: classe.id };
        })

        const types = [
            { label: "Tous les emplois", value: "*" },
            { label: " Par classe", value: "classe" },
        ];
        const {
            currentPage,
            items,
            displayMode,
            selectedPageSize,
            totalItemCount,
            selectedOrderOption,
            selectedItems,
            orderOptions,
            pageSizes,
            modalOpen,
            modalOpenDelete,
        } = this.state;
        const { match } = this.props;
        const startIndex = (currentPage - 1) * selectedPageSize;
        const endIndex = currentPage * selectedPageSize;

        return !this.state.isLoading ? (
            <div className="loading" />
        ) : (
                <Fragment>
                    <Label>
                        <h3>Affichage :</h3>
                    </Label>
                    <Select
                        onChange={this.handleChangeType}
                        value={this.state.valueType}
                        options={types}
                        className="react-select"
                        classNamePrefix="react-select"
                        name="form-field-name"

                    />
                    {this.state.valueType.value === "classe" &&
                        <>
                            <br></br>
                            <Label>
                                <h3>Niveau :</h3>
                            </Label>
                            <Select
                                onChange={this.handleChangeNiveau}
                                value={this.state.valueNiveau}
                                options={levels}
                                className="react-select"
                                placeholder="Sélectionner un niveau..."
                                classNamePrefix="react-select"
                                name="form-field-name"

                            />
                        </>
                    }
                    {this.state.valueNiveau &&
                        <>
                            <br></br>
                            <Label>
                                <h3>Classe :</h3>
                            </Label>
                            <Select
                                onChange={this.handleChangeClasse}
                                value={this.state.valueClasse}
                                options={cls}
                                className="react-select"
                                placeholder="Sélectionner une classe..."
                                classNamePrefix="react-select"
                                name="form-field-name"

                            />
                        </>
                    }
                    <div className="disable-text-selection">
                        <ListPageHeading
                            heading={this.state.valueClasse ? "Emploi de la classe " + this.state.valueNiveau.value + "" + this.state.valueClasse.label : "Liste des emplois des classes"}
                            displayMode={displayMode}
                            changeDisplayMode={this.changeDisplayMode}
                            handleChangeSelectAll={this.handleChangeSelectAll}
                            changeOrderBy={this.changeOrderBy}
                            changePageSize={this.changePageSize}
                            selectedPageSize={selectedPageSize}
                            totalItemCount={totalItemCount}
                            selectedOrderOption={selectedOrderOption}
                            match={match}
                            startIndex={startIndex}
                            endIndex={endIndex}
                            selectedItemsLength={selectedItems ? selectedItems.length : 0}
                            itemsLength={items ? items.length : 0}
                            orderOptions={orderOptions}
                            pageSizes={pageSizes}
                            toggleModal={this.toggleModal}
                            toggleModalDelete={this.toggleModalDelete}
                            selectedItemsUpdate={this.state.selectedItems.length == 1}
                            selectedItemsDelete={this.state.selectedItems.length > 0}
                            classe={this.state.valueClasse ? this.state.valueClasse : null}

                        />




                        <DeleteModal
                            modalOpen={modalOpenDelete}
                            toggleModal={this.toggleModalDelete}
                            selectedItems={this.state.selectedItems.length == 1}
                            setSt={this.setST}
                            classe={this.state.valueClasse ? this.state.valueClasse : null}
                            niveau={this.state.valueClasse ? this.state.valueNiveau.value : null}
                            emploi={this.state.emploi}
                            callback={() => this.dataListRender()}

                        />

                        <AddNewModal
                            modalOpen={modalOpen}
                            toggleModal={this.toggleModal}
                            classe={this.state.valueClasse ? this.state.valueClasse : null}
                            niveau={this.state.valueClasse ? this.state.valueNiveau.value : null}
                            callback={() => this.dataListRender()}


                        />


                        <Row>


                            {this.state.items.map((emploi, i) => {
                                return (

                                    <DataListView
                                        key={emploi.id}
                                        emploi={emploi}
                                        isSelect={this.state.selectedItems.includes(emploi.id)}
                                        onCheckItem={this.onCheckItem}
                                        setEmploi={this.setEmploi}
                                        collect={collect}
                                        classe={this.state.valueClasse ? this.state.valueClasse : null}

                                    />
                                );
                            })

                            }


                            <Pagination
                                currentPage={this.state.currentPage}
                                totalPage={this.state.totalPage}
                                onChangePage={i => this.onChangePage(i)}
                            />
                            {this.state.valueClasse &&
                                <ContextMenuContainer
                                    onContextMenuClick={this.onContextMenuClick}
                                    onContextMenu={this.onContextMenu}
                                    toggleModalDelete={this.toggleModalDelete}
                                    selectedItems={this.state.selectedItems.length == 1}

                                />}
                        </Row>
                    </div>





                </Fragment>
            );
    }
}
export default emploi_eleve;
**************************************************************************************************************
import React, { Component, Fragment } from "react";

import { Card, CustomInput, Badge, Button, Tooltip } from "reactstrap";
import { NavLink } from "react-router-dom";
import classnames from "classnames";
import { ContextMenuTrigger } from "react-contextmenu";
import { Colxx } from "../../../components/common/CustomBootstrap";
import IntlMessages from "../../../helpers/IntlMessages";
import "./classe.css";

class DataListView extends Component {
    constructor(props) {
        super(props);
        this.state = {

        };
    }



    render() {
        const { emploi, isSelect, onCheckItem, collect, classe, niveau } = this.props;
        return (

            <Colxx xxs="12" className="mb-3">
                <ContextMenuTrigger id="menu_id" data={classe.id} collect={collect}>
                    <Card
                        onClick={event => onCheckItem(event, classe.id)}
                        className={classnames("d-flex flex-row", {
                            active: isSelect
                        })}
                    >
                        {/* {type==="*" && */}
                        <div className="pl-2 d-flex flex-grow-1 min-width-zero" id={classe.id} >
                            <div className="card-body align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero align-items-lg-center">
                                <p className="w-33 w-sm-100 m-0 text-left" >
                                    Niveau : {niveau}
                                </p>
                                <p className="w-33 w-sm-100 m-0 text-center">
                                    Classe : {classe.Nom}
                                </p>
                                <h5 className="w-33 w-sm-100 m-0 text-right">
                                    <a href={classe.url} target="_blank">
                                        Voir emploi
                </a>
                                </h5>
                            </div>
                        </div>
                        {/* } */}
                        {/* {classe &&
              <div className="pl-2 d-flex flex-grow-1 min-width-zero" id={classe.id} >
                <div className="card-body align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero align-items-lg-center">
                  <h5 className="w-100 w-sm-100 m-0 text-center"><a href={classe.url} target="_blank" >
                    Voir emploi
                </a>
                  </h5>
                </div>
              </div>
            } */}
                        {isSelect == true
                            ? this.props.setEmploi(this.props.emploi)
                            : null}

                        {classe &&
                            <div className="custom-control custom-checkbox pl-1 align-self-center pr-4">
                                <CustomInput
                                    className="item-check mb-0"
                                    type="checkbox"
                                    id={`check_${classe.id}`}
                                    checked={isSelect}
                                    onChange={() => { }}
                                    label=""
                                />
                            </div>
                        }
                    </Card>
                </ContextMenuTrigger>
            </Colxx>

        );
    }
}


/* React.memo detail : https://reactjs.org/docs/react-api.html#reactpurecomponent  */
export default React.memo(DataListView);
9dymmm